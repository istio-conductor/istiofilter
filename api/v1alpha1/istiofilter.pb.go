// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1alpha1/istiofilter.proto

// `IstioFilter` defines filters that apply to istio configuration.

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IstioFilter_Schema int32

const (
	IstioFilter_DESTINATION_RULE IstioFilter_Schema = 0
	IstioFilter_VIRTUAL_SERVICE  IstioFilter_Schema = 1
)

var IstioFilter_Schema_name = map[int32]string{
	0: "DESTINATION_RULE",
	1: "VIRTUAL_SERVICE",
}

var IstioFilter_Schema_value = map[string]int32{
	"DESTINATION_RULE": 0,
	"VIRTUAL_SERVICE":  1,
}

func (x IstioFilter_Schema) String() string {
	return proto.EnumName(IstioFilter_Schema_name, int32(x))
}

func (IstioFilter_Schema) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_05057edcb71c6bfe, []int{0, 0}
}

type IstioFilter_Context int32

const (
	IstioFilter_OUTLIER_DETECTION IstioFilter_Context = 0
	IstioFilter_CONNECTION_POOL   IstioFilter_Context = 1
	IstioFilter_LOAD_BALANCER     IstioFilter_Context = 2
	IstioFilter_HTTP_ROUTE        IstioFilter_Context = 3
	IstioFilter_HTTP_ROUTE_FAULT  IstioFilter_Context = 4
)

var IstioFilter_Context_name = map[int32]string{
	0: "OUTLIER_DETECTION",
	1: "CONNECTION_POOL",
	2: "LOAD_BALANCER",
	3: "HTTP_ROUTE",
	4: "HTTP_ROUTE_FAULT",
}

var IstioFilter_Context_value = map[string]int32{
	"OUTLIER_DETECTION": 0,
	"CONNECTION_POOL":   1,
	"LOAD_BALANCER":     2,
	"HTTP_ROUTE":        3,
	"HTTP_ROUTE_FAULT":  4,
}

func (x IstioFilter_Context) String() string {
	return proto.EnumName(IstioFilter_Context_name, int32(x))
}

func (IstioFilter_Context) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_05057edcb71c6bfe, []int{0, 1}
}

type IstioFilter_SimpleMatch int32

const (
	IstioFilter_ALL     IstioFilter_SimpleMatch = 0
	IstioFilter_DEFAULT IstioFilter_SimpleMatch = 1
)

var IstioFilter_SimpleMatch_name = map[int32]string{
	0: "ALL",
	1: "DEFAULT",
}

var IstioFilter_SimpleMatch_value = map[string]int32{
	"ALL":     0,
	"DEFAULT": 1,
}

func (x IstioFilter_SimpleMatch) String() string {
	return proto.EnumName(IstioFilter_SimpleMatch_name, int32(x))
}

func (IstioFilter_SimpleMatch) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_05057edcb71c6bfe, []int{0, 2}
}

type IstioFilter_Operation int32

const (
	IstioFilter_MERGE         IstioFilter_Operation = 0
	IstioFilter_REPLACE       IstioFilter_Operation = 1
	IstioFilter_REMOVE        IstioFilter_Operation = 2
	IstioFilter_INSERT_BEFORE IstioFilter_Operation = 3
	IstioFilter_INSERT_AFTER  IstioFilter_Operation = 4
)

var IstioFilter_Operation_name = map[int32]string{
	0: "MERGE",
	1: "REPLACE",
	2: "REMOVE",
	3: "INSERT_BEFORE",
	4: "INSERT_AFTER",
}

var IstioFilter_Operation_value = map[string]int32{
	"MERGE":         0,
	"REPLACE":       1,
	"REMOVE":        2,
	"INSERT_BEFORE": 3,
	"INSERT_AFTER":  4,
}

func (x IstioFilter_Operation) String() string {
	return proto.EnumName(IstioFilter_Operation_name, int32(x))
}

func (IstioFilter_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_05057edcb71c6bfe, []int{0, 3}
}

// IstioFilter defines filters that apply to istio configuration.
//
// <!-- crd generation tags
// +cue-gen:IstioFilter:groupName:configuration.istio-conductor.org
// +cue-gen:IstioFilter:version:v1alpha1
// +cue-gen:IstioFilter:storageVersion
// +cue-gen:IstioFilter:subresource:status
// +cue-gen:IstioFilter:scope:Namespaced
// +cue-gen:IstioFilter:resource:categories=configuration-istio-conductor-org,shortNames=if
// +cue-gen:IstioFilter:printerColumn:name=Schema,type=string,JSONPath=.spec.schema,description="Istio Filter kind"
// +cue-gen:IstioFilter:printerColumn:name=Age,type=date,JSONPath=.metadata.creationTimestamp,description="CreationTimestamp is a timestamp
// representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations.
// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
// +cue-gen:IstioFilter:preserveUnknownFields:true
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=configuration.istio-conductor.org/v1alpha1
// +genclient
// +k8s:deepcopy-gen=true
// -->
type IstioFilter struct {
	// schema
	Schema               IstioFilter_Schema      `protobuf:"varint,1,opt,name=schema,proto3,enum=istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter_Schema" json:"schema,omitempty"`
	Selectors            []*IstioFilter_Selector `protobuf:"bytes,2,rep,name=selectors,proto3" json:"selectors,omitempty"`
	Changes              []*IstioFilter_Change   `protobuf:"bytes,3,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *IstioFilter) Reset()         { *m = IstioFilter{} }
func (m *IstioFilter) String() string { return proto.CompactTextString(m) }
func (*IstioFilter) ProtoMessage()    {}
func (*IstioFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_05057edcb71c6bfe, []int{0}
}
func (m *IstioFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IstioFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IstioFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IstioFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioFilter.Merge(m, src)
}
func (m *IstioFilter) XXX_Size() int {
	return m.Size()
}
func (m *IstioFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioFilter.DiscardUnknown(m)
}

var xxx_messageInfo_IstioFilter proto.InternalMessageInfo

func (m *IstioFilter) GetSchema() IstioFilter_Schema {
	if m != nil {
		return m.Schema
	}
	return IstioFilter_DESTINATION_RULE
}

func (m *IstioFilter) GetSelectors() []*IstioFilter_Selector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func (m *IstioFilter) GetChanges() []*IstioFilter_Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

type IstioFilter_Selector struct {
	LabelSelector        map[string]string `protobuf:"bytes,1,rep,name=labelSelector,proto3" json:"labelSelector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string            `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IstioFilter_Selector) Reset()         { *m = IstioFilter_Selector{} }
func (m *IstioFilter_Selector) String() string { return proto.CompactTextString(m) }
func (*IstioFilter_Selector) ProtoMessage()    {}
func (*IstioFilter_Selector) Descriptor() ([]byte, []int) {
	return fileDescriptor_05057edcb71c6bfe, []int{0, 0}
}
func (m *IstioFilter_Selector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IstioFilter_Selector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IstioFilter_Selector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IstioFilter_Selector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioFilter_Selector.Merge(m, src)
}
func (m *IstioFilter_Selector) XXX_Size() int {
	return m.Size()
}
func (m *IstioFilter_Selector) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioFilter_Selector.DiscardUnknown(m)
}

var xxx_messageInfo_IstioFilter_Selector proto.InternalMessageInfo

func (m *IstioFilter_Selector) GetLabelSelector() map[string]string {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *IstioFilter_Selector) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IstioFilter_Selector) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type IstioFilter_Change struct {
	ApplyTo              IstioFilter_Context `protobuf:"varint,1,opt,name=applyTo,proto3,enum=istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter_Context" json:"applyTo,omitempty"`
	Match                *IstioFilter_Match  `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`
	Patch                *IstioFilter_Patch  `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *IstioFilter_Change) Reset()         { *m = IstioFilter_Change{} }
func (m *IstioFilter_Change) String() string { return proto.CompactTextString(m) }
func (*IstioFilter_Change) ProtoMessage()    {}
func (*IstioFilter_Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_05057edcb71c6bfe, []int{0, 1}
}
func (m *IstioFilter_Change) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IstioFilter_Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IstioFilter_Change.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IstioFilter_Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioFilter_Change.Merge(m, src)
}
func (m *IstioFilter_Change) XXX_Size() int {
	return m.Size()
}
func (m *IstioFilter_Change) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioFilter_Change.DiscardUnknown(m)
}

var xxx_messageInfo_IstioFilter_Change proto.InternalMessageInfo

func (m *IstioFilter_Change) GetApplyTo() IstioFilter_Context {
	if m != nil {
		return m.ApplyTo
	}
	return IstioFilter_OUTLIER_DETECTION
}

func (m *IstioFilter_Change) GetMatch() *IstioFilter_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *IstioFilter_Change) GetPatch() *IstioFilter_Patch {
	if m != nil {
		return m.Patch
	}
	return nil
}

type IstioFilter_StringMatch struct {
	// Types that are valid to be assigned to Match:
	//	*IstioFilter_StringMatch_Exact
	//	*IstioFilter_StringMatch_Prefix
	//	*IstioFilter_StringMatch_Suffix
	//	*IstioFilter_StringMatch_Regex
	Match                isIstioFilter_StringMatch_Match `protobuf_oneof:"match"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *IstioFilter_StringMatch) Reset()         { *m = IstioFilter_StringMatch{} }
func (m *IstioFilter_StringMatch) String() string { return proto.CompactTextString(m) }
func (*IstioFilter_StringMatch) ProtoMessage()    {}
func (*IstioFilter_StringMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_05057edcb71c6bfe, []int{0, 2}
}
func (m *IstioFilter_StringMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IstioFilter_StringMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IstioFilter_StringMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IstioFilter_StringMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioFilter_StringMatch.Merge(m, src)
}
func (m *IstioFilter_StringMatch) XXX_Size() int {
	return m.Size()
}
func (m *IstioFilter_StringMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioFilter_StringMatch.DiscardUnknown(m)
}

var xxx_messageInfo_IstioFilter_StringMatch proto.InternalMessageInfo

type isIstioFilter_StringMatch_Match interface {
	isIstioFilter_StringMatch_Match()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IstioFilter_StringMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof" json:"exact,omitempty"`
}
type IstioFilter_StringMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type IstioFilter_StringMatch_Suffix struct {
	Suffix string `protobuf:"bytes,3,opt,name=suffix,proto3,oneof" json:"suffix,omitempty"`
}
type IstioFilter_StringMatch_Regex struct {
	Regex string `protobuf:"bytes,4,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
}

func (*IstioFilter_StringMatch_Exact) isIstioFilter_StringMatch_Match()  {}
func (*IstioFilter_StringMatch_Prefix) isIstioFilter_StringMatch_Match() {}
func (*IstioFilter_StringMatch_Suffix) isIstioFilter_StringMatch_Match() {}
func (*IstioFilter_StringMatch_Regex) isIstioFilter_StringMatch_Match()  {}

func (m *IstioFilter_StringMatch) GetMatch() isIstioFilter_StringMatch_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *IstioFilter_StringMatch) GetExact() string {
	if x, ok := m.GetMatch().(*IstioFilter_StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *IstioFilter_StringMatch) GetPrefix() string {
	if x, ok := m.GetMatch().(*IstioFilter_StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *IstioFilter_StringMatch) GetSuffix() string {
	if x, ok := m.GetMatch().(*IstioFilter_StringMatch_Suffix); ok {
		return x.Suffix
	}
	return ""
}

func (m *IstioFilter_StringMatch) GetRegex() string {
	if x, ok := m.GetMatch().(*IstioFilter_StringMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IstioFilter_StringMatch) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IstioFilter_StringMatch_Exact)(nil),
		(*IstioFilter_StringMatch_Prefix)(nil),
		(*IstioFilter_StringMatch_Suffix)(nil),
		(*IstioFilter_StringMatch_Regex)(nil),
	}
}

type IstioFilter_Match struct {
	// Types that are valid to be assigned to Match:
	//	*IstioFilter_Match_Simple
	//	*IstioFilter_Match_Selector
	Match                isIstioFilter_Match_Match `protobuf_oneof:"match"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *IstioFilter_Match) Reset()         { *m = IstioFilter_Match{} }
func (m *IstioFilter_Match) String() string { return proto.CompactTextString(m) }
func (*IstioFilter_Match) ProtoMessage()    {}
func (*IstioFilter_Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_05057edcb71c6bfe, []int{0, 3}
}
func (m *IstioFilter_Match) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IstioFilter_Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IstioFilter_Match.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IstioFilter_Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioFilter_Match.Merge(m, src)
}
func (m *IstioFilter_Match) XXX_Size() int {
	return m.Size()
}
func (m *IstioFilter_Match) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioFilter_Match.DiscardUnknown(m)
}

var xxx_messageInfo_IstioFilter_Match proto.InternalMessageInfo

type isIstioFilter_Match_Match interface {
	isIstioFilter_Match_Match()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IstioFilter_Match_Simple struct {
	Simple IstioFilter_SimpleMatch `protobuf:"varint,1,opt,name=simple,proto3,enum=istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter_SimpleMatch,oneof" json:"simple,omitempty"`
}
type IstioFilter_Match_Selector struct {
	Selector *IstioFilter_SelectorMatch `protobuf:"bytes,2,opt,name=selector,proto3,oneof" json:"selector,omitempty"`
}

func (*IstioFilter_Match_Simple) isIstioFilter_Match_Match()   {}
func (*IstioFilter_Match_Selector) isIstioFilter_Match_Match() {}

func (m *IstioFilter_Match) GetMatch() isIstioFilter_Match_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *IstioFilter_Match) GetSimple() IstioFilter_SimpleMatch {
	if x, ok := m.GetMatch().(*IstioFilter_Match_Simple); ok {
		return x.Simple
	}
	return IstioFilter_ALL
}

func (m *IstioFilter_Match) GetSelector() *IstioFilter_SelectorMatch {
	if x, ok := m.GetMatch().(*IstioFilter_Match_Selector); ok {
		return x.Selector
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IstioFilter_Match) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IstioFilter_Match_Simple)(nil),
		(*IstioFilter_Match_Selector)(nil),
	}
}

type IstioFilter_SelectorMatch struct {
	Name                 *IstioFilter_StringMatch `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels               map[string]string        `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *IstioFilter_SelectorMatch) Reset()         { *m = IstioFilter_SelectorMatch{} }
func (m *IstioFilter_SelectorMatch) String() string { return proto.CompactTextString(m) }
func (*IstioFilter_SelectorMatch) ProtoMessage()    {}
func (*IstioFilter_SelectorMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_05057edcb71c6bfe, []int{0, 4}
}
func (m *IstioFilter_SelectorMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IstioFilter_SelectorMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IstioFilter_SelectorMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IstioFilter_SelectorMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioFilter_SelectorMatch.Merge(m, src)
}
func (m *IstioFilter_SelectorMatch) XXX_Size() int {
	return m.Size()
}
func (m *IstioFilter_SelectorMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioFilter_SelectorMatch.DiscardUnknown(m)
}

var xxx_messageInfo_IstioFilter_SelectorMatch proto.InternalMessageInfo

func (m *IstioFilter_SelectorMatch) GetName() *IstioFilter_StringMatch {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *IstioFilter_SelectorMatch) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type IstioFilter_Patch struct {
	Operation            IstioFilter_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter_Operation" json:"operation,omitempty"`
	Value                *types.Struct         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IstioFilter_Patch) Reset()         { *m = IstioFilter_Patch{} }
func (m *IstioFilter_Patch) String() string { return proto.CompactTextString(m) }
func (*IstioFilter_Patch) ProtoMessage()    {}
func (*IstioFilter_Patch) Descriptor() ([]byte, []int) {
	return fileDescriptor_05057edcb71c6bfe, []int{0, 5}
}
func (m *IstioFilter_Patch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IstioFilter_Patch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IstioFilter_Patch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IstioFilter_Patch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioFilter_Patch.Merge(m, src)
}
func (m *IstioFilter_Patch) XXX_Size() int {
	return m.Size()
}
func (m *IstioFilter_Patch) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioFilter_Patch.DiscardUnknown(m)
}

var xxx_messageInfo_IstioFilter_Patch proto.InternalMessageInfo

func (m *IstioFilter_Patch) GetOperation() IstioFilter_Operation {
	if m != nil {
		return m.Operation
	}
	return IstioFilter_MERGE
}

func (m *IstioFilter_Patch) GetValue() *types.Struct {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter_Schema", IstioFilter_Schema_name, IstioFilter_Schema_value)
	proto.RegisterEnum("istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter_Context", IstioFilter_Context_name, IstioFilter_Context_value)
	proto.RegisterEnum("istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter_SimpleMatch", IstioFilter_SimpleMatch_name, IstioFilter_SimpleMatch_value)
	proto.RegisterEnum("istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter_Operation", IstioFilter_Operation_name, IstioFilter_Operation_value)
	proto.RegisterType((*IstioFilter)(nil), "istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter")
	proto.RegisterType((*IstioFilter_Selector)(nil), "istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter.Selector")
	proto.RegisterMapType((map[string]string)(nil), "istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter.Selector.LabelSelectorEntry")
	proto.RegisterType((*IstioFilter_Change)(nil), "istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter.Change")
	proto.RegisterType((*IstioFilter_StringMatch)(nil), "istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter.StringMatch")
	proto.RegisterType((*IstioFilter_Match)(nil), "istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter.Match")
	proto.RegisterType((*IstioFilter_SelectorMatch)(nil), "istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter.SelectorMatch")
	proto.RegisterMapType((map[string]string)(nil), "istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter.SelectorMatch.LabelsEntry")
	proto.RegisterType((*IstioFilter_Patch)(nil), "istio_filter.configuration.istio_conductor.org.v1alpha1.IstioFilter.Patch")
}

func init() { proto.RegisterFile("api/v1alpha1/istiofilter.proto", fileDescriptor_05057edcb71c6bfe) }

var fileDescriptor_05057edcb71c6bfe = []byte{
	// 815 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4d, 0x92, 0xe3, 0x34,
	0x14, 0xc7, 0xdb, 0x76, 0xc7, 0x99, 0x3c, 0xd3, 0x33, 0x1e, 0x31, 0x80, 0x2b, 0x35, 0x95, 0xea,
	0x0a, 0x9b, 0xde, 0x8c, 0x53, 0x93, 0x5e, 0xf0, 0xb1, 0xc2, 0x49, 0x14, 0x3a, 0xe0, 0xc4, 0x29,
	0xc5, 0xe9, 0x05, 0x0b, 0x3c, 0x8e, 0x47, 0x71, 0xcc, 0x38, 0xb6, 0xcb, 0x1f, 0x5d, 0x69, 0x0e,
	0x00, 0x17, 0x61, 0xc1, 0x01, 0x38, 0x04, 0x4b, 0x8e, 0x40, 0xf5, 0x82, 0x25, 0x67, 0xa0, 0x2c,
	0xd9, 0x9d, 0x4c, 0xb1, 0x82, 0xf2, 0xca, 0x7e, 0x4f, 0xd2, 0xef, 0xff, 0xf4, 0xa4, 0x27, 0x09,
	0x7a, 0x6e, 0x12, 0x0c, 0xee, 0x5e, 0xbb, 0x61, 0xb2, 0x73, 0x5f, 0x0f, 0x82, 0x2c, 0x0f, 0xe2,
	0x6d, 0x10, 0xe6, 0x34, 0xd5, 0x93, 0x34, 0xce, 0x63, 0xf4, 0x19, 0x73, 0x39, 0x95, 0xcf, 0x8b,
	0xa3, 0x6d, 0xe0, 0x17, 0xa9, 0x9b, 0x07, 0x71, 0xa4, 0xf3, 0x26, 0x2f, 0x8e, 0xde, 0x16, 0x5e,
	0x1e, 0xa7, 0x7a, 0x9c, 0xfa, 0x7a, 0x8d, 0xea, 0xbe, 0xf4, 0xe3, 0xd8, 0x0f, 0xe9, 0x80, 0x61,
	0x36, 0xc5, 0x76, 0x90, 0xe5, 0x69, 0xe1, 0xe5, 0x1c, 0xdb, 0xff, 0xeb, 0x19, 0x28, 0xb3, 0x72,
	0xf8, 0x94, 0x81, 0x91, 0x07, 0x72, 0xe6, 0xed, 0xe8, 0xde, 0xd5, 0x84, 0x4b, 0xe1, 0xea, 0xe9,
	0xf0, 0x5b, 0xfd, 0x7f, 0xea, 0xea, 0x27, 0x54, 0x7d, 0xc5, 0x90, 0xa4, 0x42, 0xa3, 0x77, 0xd0,
	0xc9, 0x68, 0x48, 0xcb, 0x31, 0x99, 0x26, 0x5e, 0x4a, 0x57, 0xca, 0x70, 0xde, 0x8c, 0x4e, 0x45,
	0x25, 0x47, 0x3e, 0xa2, 0xd0, 0xf6, 0x76, 0x6e, 0xe4, 0xd3, 0x4c, 0x93, 0x98, 0x54, 0x33, 0x53,
	0x1a, 0x33, 0x26, 0xa9, 0xd9, 0xdd, 0x9f, 0x45, 0x78, 0x52, 0xcb, 0xa3, 0x9f, 0x04, 0xb8, 0x08,
	0xdd, 0x0d, 0x0d, 0x6b, 0x8f, 0x26, 0x30, 0xe9, 0x37, 0x8d, 0xce, 0x52, 0x37, 0x4f, 0x25, 0x70,
	0x94, 0xa7, 0xf7, 0xe4, 0x7d, 0x59, 0x84, 0xe0, 0x3c, 0x72, 0xf7, 0x54, 0x13, 0x2f, 0x85, 0xab,
	0x0e, 0x61, 0xff, 0xe8, 0x25, 0x74, 0xca, 0x6f, 0x96, 0xb8, 0x1e, 0xd5, 0x24, 0xd6, 0x70, 0x74,
	0x74, 0xbf, 0x02, 0xf4, 0x6f, 0x2c, 0x52, 0x41, 0x7a, 0x47, 0xef, 0xd9, 0x9e, 0xe8, 0x90, 0xf2,
	0x17, 0xbd, 0x80, 0xd6, 0x9d, 0x1b, 0x16, 0x35, 0x9a, 0x1b, 0x5f, 0x8a, 0x9f, 0x0b, 0xdd, 0xdf,
	0x44, 0x90, 0x79, 0x76, 0xd0, 0x16, 0xda, 0x6e, 0x92, 0x84, 0xf7, 0x76, 0x5c, 0x6d, 0x27, 0xb3,
	0x99, 0xdc, 0xc7, 0x51, 0x4e, 0x0f, 0x39, 0xa9, 0xe1, 0xe8, 0x0d, 0xb4, 0xf6, 0x6e, 0xee, 0xed,
	0x58, 0x30, 0xca, 0xf0, 0x9b, 0x46, 0x54, 0xe6, 0x25, 0x91, 0x70, 0x70, 0xa9, 0x90, 0x30, 0x05,
	0xa9, 0x41, 0x85, 0x25, 0x57, 0x60, 0xe0, 0xee, 0x8f, 0xa0, 0xac, 0xf2, 0x34, 0x88, 0x7c, 0xa6,
	0x8b, 0x3e, 0x86, 0x16, 0x3d, 0xb8, 0x5e, 0xce, 0x73, 0x7e, 0x73, 0x46, 0xb8, 0x89, 0x34, 0x90,
	0x93, 0x94, 0x6e, 0x83, 0x03, 0x4f, 0xfc, 0xcd, 0x19, 0xa9, 0xec, 0xb2, 0x25, 0x2b, 0xb6, 0x65,
	0x8b, 0x54, 0xb7, 0x70, 0xbb, 0x64, 0xa5, 0xd4, 0xa7, 0x07, 0xed, 0xbc, 0x66, 0x31, 0x73, 0xd4,
	0xae, 0xd2, 0xd6, 0xfd, 0x5b, 0x80, 0x16, 0x97, 0xfd, 0x01, 0xe4, 0x2c, 0xd8, 0x27, 0x21, 0xad,
	0x16, 0x6c, 0xd9, 0xcc, 0x8e, 0x65, 0x48, 0xa6, 0xc0, 0xc2, 0x62, 0x26, 0x4a, 0xe0, 0x49, 0x5d,
	0xa6, 0xd5, 0xc2, 0x91, 0x46, 0xeb, 0xa3, 0xd6, 0x7b, 0x54, 0x39, 0x4e, 0xf8, 0x57, 0x11, 0x2e,
	0xde, 0xeb, 0x86, 0xde, 0x56, 0x95, 0x22, 0xb0, 0x40, 0x1a, 0x9a, 0xf6, 0x71, 0x3d, 0xab, 0xda,
	0xbb, 0x03, 0x99, 0x15, 0x68, 0x7d, 0xec, 0x7d, 0xdf, 0xfc, 0x84, 0xf9, 0xa9, 0x90, 0xf1, 0xe3,
	0xa0, 0x52, 0xeb, 0x7e, 0x01, 0xca, 0x89, 0xfb, 0x3f, 0x95, 0xf3, 0x2f, 0x02, 0xb4, 0xd8, 0x46,
	0x45, 0x21, 0x74, 0xe2, 0x84, 0xf2, 0xe0, 0xaa, 0xed, 0xb1, 0x68, 0x24, 0x7e, 0xab, 0xa6, 0x92,
	0xa3, 0x00, 0x7a, 0x75, 0x1a, 0x91, 0x32, 0xfc, 0x44, 0xe7, 0xf7, 0x98, 0x5e, 0xdf, 0x63, 0x65,
	0x76, 0x0b, 0x2f, 0xaf, 0x42, 0xed, 0x5f, 0x83, 0xcc, 0x6f, 0x19, 0xf4, 0x02, 0xd4, 0x09, 0x5e,
	0xd9, 0xb3, 0x85, 0x61, 0xcf, 0xac, 0x85, 0x43, 0xd6, 0x26, 0x56, 0xcf, 0xd0, 0x87, 0xf0, 0xec,
	0x76, 0x46, 0xec, 0xb5, 0x61, 0x3a, 0x2b, 0x4c, 0x6e, 0x67, 0x63, 0xac, 0x0a, 0xfd, 0x08, 0xda,
	0xd5, 0x59, 0x82, 0x3e, 0x82, 0xe7, 0xd6, 0xda, 0x36, 0x67, 0x98, 0x38, 0x13, 0x6c, 0xe3, 0x71,
	0x39, 0x96, 0x0f, 0x1b, 0x5b, 0x8b, 0x05, 0xb7, 0x9d, 0xa5, 0x65, 0x99, 0xaa, 0x80, 0x9e, 0xc3,
	0x85, 0x69, 0x19, 0x13, 0x67, 0x64, 0x98, 0xc6, 0x62, 0x8c, 0x89, 0x2a, 0xa2, 0xa7, 0x00, 0x37,
	0xb6, 0xbd, 0x74, 0x88, 0xb5, 0xb6, 0xb1, 0x2a, 0x95, 0x41, 0x1c, 0x6d, 0x67, 0x6a, 0xac, 0x4d,
	0x5b, 0x3d, 0xef, 0x7f, 0x0a, 0xca, 0x49, 0x29, 0xa0, 0x36, 0x48, 0x86, 0x69, 0xaa, 0x67, 0x48,
	0x81, 0xf6, 0x04, 0xf3, 0x4e, 0x42, 0xdf, 0x86, 0xce, 0x63, 0x42, 0x50, 0x07, 0x5a, 0x73, 0x4c,
	0xbe, 0xc6, 0xbc, 0x13, 0xc1, 0x4b, 0xd3, 0x28, 0x23, 0x47, 0x00, 0x32, 0xc1, 0x73, 0xeb, 0x16,
	0xab, 0x62, 0x19, 0xce, 0x6c, 0xb1, 0xc2, 0xc4, 0x76, 0x46, 0x78, 0x6a, 0x91, 0x52, 0x5e, 0x85,
	0x0f, 0x2a, 0x97, 0x31, 0xb5, 0x31, 0x51, 0xcf, 0x47, 0xc6, 0xef, 0x0f, 0x3d, 0xe1, 0x8f, 0x87,
	0x9e, 0xf0, 0xe7, 0x43, 0x4f, 0xf8, 0xee, 0xda, 0x0f, 0xf2, 0x5d, 0xb1, 0xd1, 0xbd, 0x78, 0xcf,
	0xdf, 0x1a, 0xaf, 0x1e, 0x97, 0xe9, 0xf4, 0xed, 0x31, 0x38, 0x7d, 0x94, 0x6c, 0x64, 0x96, 0xfa,
	0xeb, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xb8, 0xb8, 0x11, 0xab, 0x08, 0x00, 0x00,
}

func (m *IstioFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IstioFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIstiofilter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Selectors) > 0 {
		for iNdEx := len(m.Selectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Selectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIstiofilter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Schema != 0 {
		i = encodeVarintIstiofilter(dAtA, i, uint64(m.Schema))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IstioFilter_Selector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IstioFilter_Selector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_Selector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintIstiofilter(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIstiofilter(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LabelSelector) > 0 {
		for k := range m.LabelSelector {
			v := m.LabelSelector[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintIstiofilter(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintIstiofilter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintIstiofilter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IstioFilter_Change) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IstioFilter_Change) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_Change) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Patch != nil {
		{
			size, err := m.Patch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIstiofilter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Match != nil {
		{
			size, err := m.Match.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIstiofilter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ApplyTo != 0 {
		i = encodeVarintIstiofilter(dAtA, i, uint64(m.ApplyTo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IstioFilter_StringMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IstioFilter_StringMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_StringMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Match != nil {
		{
			size := m.Match.Size()
			i -= size
			if _, err := m.Match.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IstioFilter_StringMatch_Exact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_StringMatch_Exact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Exact)
	copy(dAtA[i:], m.Exact)
	i = encodeVarintIstiofilter(dAtA, i, uint64(len(m.Exact)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *IstioFilter_StringMatch_Prefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_StringMatch_Prefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Prefix)
	copy(dAtA[i:], m.Prefix)
	i = encodeVarintIstiofilter(dAtA, i, uint64(len(m.Prefix)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *IstioFilter_StringMatch_Suffix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_StringMatch_Suffix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Suffix)
	copy(dAtA[i:], m.Suffix)
	i = encodeVarintIstiofilter(dAtA, i, uint64(len(m.Suffix)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *IstioFilter_StringMatch_Regex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_StringMatch_Regex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Regex)
	copy(dAtA[i:], m.Regex)
	i = encodeVarintIstiofilter(dAtA, i, uint64(len(m.Regex)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *IstioFilter_Match) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IstioFilter_Match) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_Match) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Match != nil {
		{
			size := m.Match.Size()
			i -= size
			if _, err := m.Match.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IstioFilter_Match_Simple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_Match_Simple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintIstiofilter(dAtA, i, uint64(m.Simple))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *IstioFilter_Match_Selector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_Match_Selector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Selector != nil {
		{
			size, err := m.Selector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIstiofilter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *IstioFilter_SelectorMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IstioFilter_SelectorMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_SelectorMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintIstiofilter(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintIstiofilter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintIstiofilter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Name != nil {
		{
			size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIstiofilter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IstioFilter_Patch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IstioFilter_Patch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFilter_Patch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIstiofilter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Operation != 0 {
		i = encodeVarintIstiofilter(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIstiofilter(dAtA []byte, offset int, v uint64) int {
	offset -= sovIstiofilter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IstioFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schema != 0 {
		n += 1 + sovIstiofilter(uint64(m.Schema))
	}
	if len(m.Selectors) > 0 {
		for _, e := range m.Selectors {
			l = e.Size()
			n += 1 + l + sovIstiofilter(uint64(l))
		}
	}
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovIstiofilter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IstioFilter_Selector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelSelector) > 0 {
		for k, v := range m.LabelSelector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovIstiofilter(uint64(len(k))) + 1 + len(v) + sovIstiofilter(uint64(len(v)))
			n += mapEntrySize + 1 + sovIstiofilter(uint64(mapEntrySize))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIstiofilter(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovIstiofilter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IstioFilter_Change) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplyTo != 0 {
		n += 1 + sovIstiofilter(uint64(m.ApplyTo))
	}
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovIstiofilter(uint64(l))
	}
	if m.Patch != nil {
		l = m.Patch.Size()
		n += 1 + l + sovIstiofilter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IstioFilter_StringMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match != nil {
		n += m.Match.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IstioFilter_StringMatch_Exact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Exact)
	n += 1 + l + sovIstiofilter(uint64(l))
	return n
}
func (m *IstioFilter_StringMatch_Prefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	n += 1 + l + sovIstiofilter(uint64(l))
	return n
}
func (m *IstioFilter_StringMatch_Suffix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suffix)
	n += 1 + l + sovIstiofilter(uint64(l))
	return n
}
func (m *IstioFilter_StringMatch_Regex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Regex)
	n += 1 + l + sovIstiofilter(uint64(l))
	return n
}
func (m *IstioFilter_Match) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match != nil {
		n += m.Match.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IstioFilter_Match_Simple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIstiofilter(uint64(m.Simple))
	return n
}
func (m *IstioFilter_Match_Selector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovIstiofilter(uint64(l))
	}
	return n
}
func (m *IstioFilter_SelectorMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovIstiofilter(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovIstiofilter(uint64(len(k))) + 1 + len(v) + sovIstiofilter(uint64(len(v)))
			n += mapEntrySize + 1 + sovIstiofilter(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IstioFilter_Patch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != 0 {
		n += 1 + sovIstiofilter(uint64(m.Operation))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovIstiofilter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIstiofilter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIstiofilter(x uint64) (n int) {
	return sovIstiofilter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IstioFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIstiofilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IstioFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IstioFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			m.Schema = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Schema |= IstioFilter_Schema(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selectors = append(m.Selectors, &IstioFilter_Selector{})
			if err := m.Selectors[len(m.Selectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, &IstioFilter_Change{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIstiofilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IstioFilter_Selector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIstiofilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Selector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Selector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelector == nil {
				m.LabelSelector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIstiofilter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIstiofilter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthIstiofilter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthIstiofilter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIstiofilter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthIstiofilter
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthIstiofilter
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipIstiofilter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthIstiofilter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelSelector[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIstiofilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IstioFilter_Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIstiofilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyTo", wireType)
			}
			m.ApplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyTo |= IstioFilter_Context(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Match == nil {
				m.Match = &IstioFilter_Match{}
			}
			if err := m.Match.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Patch == nil {
				m.Patch = &IstioFilter_Patch{}
			}
			if err := m.Patch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIstiofilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IstioFilter_StringMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIstiofilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Match = &IstioFilter_StringMatch_Exact{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Match = &IstioFilter_StringMatch_Prefix{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Match = &IstioFilter_StringMatch_Suffix{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Match = &IstioFilter_StringMatch_Regex{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIstiofilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IstioFilter_Match) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIstiofilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Match: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Match: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Simple", wireType)
			}
			var v IstioFilter_SimpleMatch
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= IstioFilter_SimpleMatch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Match = &IstioFilter_Match_Simple{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IstioFilter_SelectorMatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &IstioFilter_Match_Selector{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIstiofilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IstioFilter_SelectorMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIstiofilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectorMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectorMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &IstioFilter_StringMatch{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIstiofilter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIstiofilter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthIstiofilter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthIstiofilter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIstiofilter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthIstiofilter
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthIstiofilter
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipIstiofilter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthIstiofilter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIstiofilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IstioFilter_Patch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIstiofilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Patch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Patch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= IstioFilter_Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIstiofilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &types.Struct{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIstiofilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIstiofilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIstiofilter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIstiofilter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIstiofilter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIstiofilter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIstiofilter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIstiofilter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIstiofilter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIstiofilter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIstiofilter = fmt.Errorf("proto: unexpected end of group")
)
